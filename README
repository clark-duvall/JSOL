JSOL: JavaScript Object Language

JSOL is an interpreted language represented by JSON. Since any JSOL program
is completely written in JSON, it is very serializable. This allows for easy
passing of complete programs between applications.

This is the very first version, so there are many improvements to be made.


Features

 - Closures
 - First class functions
 - string, list, number, dictionary, and function types
 - fully representable in JSON.


Syntax

   Basic
    - '{"a": 5}'                     -> assignment
    - '"add": {...}'                 -> function definition
    - '["add", "a", "b", "a"]'       -> function call
    - '{"lit": "hello"}'             -> string literal

   Lists
    - '{"lit": [1, 2, 3]}'           -> list literal
    - '["l", 0]'                     -> get first element in list
    - '["l", 0, 5]'                  -> set first element in list to be 5
    - '["del", "l", 0]'              -> delete and return first element in list
    - '["ins", "l", 0, 5]'           -> insert 5 into the beginning of the list

   Dictionaries
    - '{"lit": {"a": 5, "b": 2}}'    -> dictionary literal
    - '["d", {"lit": "a"}]'          -> get the value with the key "a"
    - '["d", {"lit": "a"}, 5]'       -> set "a" to be 5 in the dictionary

   For/If blocks
    - '["for", <exp>, <cond>, <exp>, |
          [...]                      |
       ]'                            -> for loop
    - '["if", <cond>,                |
          [...],                     |
        "elif", <cond>,              |
          [...],                     |
        "else",                      |
          [...]                      |
       ]'                            -> if/else


Examples

The examples/ directory has some example programs.
Run examples by typing 'jsol.py examples/<name_of_example>'

   - fib.jsol - outputs the Fibonacci sequence using a closure
   - main.jsol - example of all the language elements


Testing

Run tests by typing 'jsol.py test_data/<name_of_test>'


Future

 - Better error handling/messages.
 - More examples
 - Hopefully, the interpreter will be ported to a variety of languages.
