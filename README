JSOL: JavaScript Object Language

JSOL is an interpreted language represented by JSON. Since any JSOL program
is completely written in JSON, its data structures and functions can be
represented (and edited) in any language that has a JSON parser and JSOL
interpreter. This allows for easy passing of complete programs between
applications.

Check out http://jsol.org for an online JSOL playground.

This is the very first version, so there are many improvements to be made.


Features

 - Closures
 - First class functions
 - string, list, number, dictionary, null, and function types
 - fully representable in JSON.


Syntax

   Basic
    - '{"a": 5}'                     -> assignment
    - '"add": {...}'                 -> function definition
    - '["add", "a", "b", "a"]'       -> function call
    - '{"lit": "hello"}'             -> string literal

   Lists
    - '{"lit": [1, 2, 3]}'           -> list literal
    - '["l", 0]'                     -> get first element in list
    - '["l", 0, 5]'                  -> set first element in list to be 5
    - '["del", "l", 0]'              -> delete and return first element in list
    - '["ins", "l", 0, 5]'           -> insert 5 into the beginning of the list

   Dictionaries
    - '{"lit": {"a": 5, "b": 2}}'    -> dictionary literal
    - '["d", {"lit": "a"}]'          -> get the value with the key "a"
    - '["d", {"lit": "a"}, 5]'       -> set "a" to be 5 in the dictionary

   If block
    - '["if",                        |
          <cond>, [...],             |
          <cond>, [...],             |
          ...                        |
          [...]                      |
       ]'                            -> if/else


Examples

The examples/ directory has some example programs.
Run examples by typing 'jsol.py examples/<name_of_example>'

   - fib.jsol - outputs the Fibonacci sequence using a closure
   - recursive.jsol - an example of a recursive function
   - quick_sort.jsol - an example of sorting a list by passing in a compare
     function
   - passer.py - ./passer.py (in main directory) illustrates passing a JSOL
     program between applications
   - editor.py - ./editor.py shows how a JSOL program can be edited on the fly


Testing

Run tests using 'run_tests.sh'


Future

 - Better error handling/messages.
 - More examples.
 - Documentation.
 - Porting into other languages (probably starting with JavaScript).

Created by Clark DuVall http://clarkduvall.com
